"use client";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import * as THREE from "three";
import React, { useEffect, useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { a } from "@react-spring/three";
import { Euler, Vector3, useFrame, useThree } from "@react-three/fiber";

type GLTFResult = GLTF & {
	nodes: {
		polySurface944_tree_body_0: THREE.Mesh;
		polySurface945_tree1_0: THREE.Mesh;
		polySurface946_tree2_0: THREE.Mesh;
		polySurface947_tree1_0: THREE.Mesh;
		polySurface948_tree_body_0: THREE.Mesh;
		polySurface949_tree_body_0: THREE.Mesh;
		pCube11_rocks1_0: THREE.Mesh;
	};
	materials: {
		PaletteMaterial001: THREE.MeshStandardMaterial;
		// PaletteMaterial001: THREE.MeshStandardMaterial;
	};
};

type propType = {
	isRotating: boolean;
	setIsRotating: React.Dispatch<React.SetStateAction<boolean>>;
	rotation: Euler;
	position: Vector3;
	scale: Vector3;
	currentStage: number | null;
	setCurrentStage: React.Dispatch<React.SetStateAction<number | null>>;
};

const Island = ({ isRotating, setIsRotating, setCurrentStage, ...props }: propType) => {
	const islandRef = useRef<THREE.Group>(null);
	const { gl, viewport } = useThree();
	const { nodes, materials } = useGLTF("/assets/3d/island.glb") as GLTFResult;
	const lastX = useRef(0);
	const rotationSpeed = useRef(0);
	const dumpingFactor = 0.95;

	const handlePointerDown = (e: any) => {
		e.stopPropagation();
		e.preventDefault();
		setIsRotating(true);
		const clientX = e?.touches ? e?.touches[0].clientX : e?.clientX;
		lastX.current = clientX;
	};

	const handlePointerUp = (e: any) => {
		e.stopPropagation();
		e.preventDefault();
		setIsRotating(false);
	};

	const handlePointerMove = (e: any) => {
		e.stopPropagation();
		e.preventDefault();
		const clientX = e?.touches ? e?.touches[0].clientX : e?.clientX;
		if (isRotating) {
			const delta = (clientX - lastX.current) / viewport.width;
			if (islandRef.current) {
				islandRef.current.rotation.y += delta * Math.PI * 0.005;
			}

			lastX.current = clientX;
			rotationSpeed.current = delta * 0.01 * Math.PI;
		}
	};

	const handleKeyDown = (e: any) => {
		if (e.key === "ArrowRight") {
			if (!isRotating) setIsRotating(true);
			if (islandRef.current) {
				islandRef.current.rotation.y += 0.001 * Math.PI;
				rotationSpeed.current = 0.0125;
			}
		} else if (e.key === "ArrowLeft") {
			if (!isRotating) setIsRotating(true);
			if (islandRef.current) {
				islandRef.current.rotation.y -= 0.001 * Math.PI;
				rotationSpeed.current = -0.0125;
			}
		}
	};

	const handleKeyUp = (e: any) => {
		if (e.key === "ArrowLeft" || e.key === "ArrowRight") {
			setIsRotating(false);
		}
	};

	useFrame(() => {
		if (!isRotating) {
			rotationSpeed.current *= dumpingFactor;
			if (Math.abs(rotationSpeed.current) < 0.01) {
				rotationSpeed.current = 0;
			}
			islandRef.current!.rotation.y += rotationSpeed.current;
		} else {
			const rotation: number = islandRef.current?.rotation.y ?? 0;

			const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

			// Set the current stage based on the island's orientation
			switch (true) {
				case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
					setCurrentStage(4);
					break;
				case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
					setCurrentStage(3);
					break;
				case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
					setCurrentStage(2);
					break;
				case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
					setCurrentStage(1);
					break;
				default:
					setCurrentStage(null);
			}
		}
	});

	useEffect(() => {
		const canvas = gl.domElement;
		canvas.addEventListener("pointerdown", handlePointerDown);
		canvas.addEventListener("pointerup", handlePointerUp);
		canvas.addEventListener("pointermove", handlePointerMove);
		document.addEventListener("keydown", handleKeyDown);
		document.addEventListener("keyup", handleKeyUp);
		return () => {
			canvas.removeEventListener("pointerdown", handlePointerDown);
			canvas.removeEventListener("pointerup", handlePointerUp);
			canvas.removeEventListener("pointermove", handlePointerMove);
			document.addEventListener("keydown", handleKeyDown);
			document.addEventListener("keyup", handleKeyUp);
		};
	}, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

	return (
		<a.group
			{...props}
			ref={islandRef}>
			<mesh
				geometry={nodes.polySurface944_tree_body_0.geometry}
				material={materials.PaletteMaterial001}
			/>
			<mesh
				geometry={nodes.polySurface945_tree1_0.geometry}
				material={materials.PaletteMaterial001}
			/>
			<mesh
				geometry={nodes.polySurface946_tree2_0.geometry}
				material={materials.PaletteMaterial001}
			/>
			<mesh
				geometry={nodes.polySurface947_tree1_0.geometry}
				material={materials.PaletteMaterial001}
			/>
			<mesh
				geometry={nodes.polySurface948_tree_body_0.geometry}
				material={materials.PaletteMaterial001}
			/>
			<mesh
				geometry={nodes.polySurface949_tree_body_0.geometry}
				material={materials.PaletteMaterial001}
			/>
			<mesh
				geometry={nodes.pCube11_rocks1_0.geometry}
				material={materials.PaletteMaterial001}
			/>
		</a.group>
	);
};

export default Island;
